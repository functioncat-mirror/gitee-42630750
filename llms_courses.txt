========================================
COURSE
========================================
TITLE: 1-搭建 React + TailwindCSS + ShadcnUI + Vite 开发环境
DESCRIPTION: 学习如何搭建基于 React、TailwindCSS、ShadcnUI 和 Vite 的现代化前端开发环境，包括环境配置、依赖安装和基础项目结构
DIFFICULTY: beginner
ESTIMATED_TIME: 30
PREREQUISITES: 基本的命令行操作知识、Node.js 基础
TAGS: react, tailwindcss, shadcnui, vite, 环境搭建

PROJECT_FILES:
package.json
vite.config.js
tailwind.config.js
postcss.config.js
src/
src/components/
src/lib/
src/assets/
src/App.tsx
src/main.tsx
src/index.css
components.json

STEPS:

STEP: 安装 Node.js 环境和包管理器

FILE: package.json
LANGUAGE: json
CODE:
```json
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17"
  }
}
```
HIGHLIGHTS: 1-15

CONTENT:
## 安装 Node.js 环境和包管理器

要搭建现代化前端开发环境，首先需要安装 Node.js 运行时环境。

### 1. 安装 Node.js

访问 [Node.js 官网](https://nodejs.org/) 下载并安装最新的 LTS 版本的 Node.js。安装完成后，可以通过以下命令验证是否安装成功：

```bash
node --version
npm --version
```

期望结果：命令行能正确显示 Node.js 和 npm 的版本号。

### 2. 使用 pnpm 作为包管理器

本模板推荐使用 pnpm 作为包管理器，它比 npm 和 yarn 更快且更节省磁盘空间。通过以下命令安装 pnpm：

```bash
npm install -g pnpm
```

安装完成后验证：

```bash
pnpm --version
```

期望结果：能够正常使用 pnpm 命令安装依赖。
--------------------
STEP: 创建 Vite 项目和安装依赖

FILE: package.json
LANGUAGE: json
CODE:
```json
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "@vitejs/plugin-react": "^4.2.1",
    "eslint": "^8.55.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "typescript": "^5.2.2",
    "vite": "^5.0.8"
  }
}
```
HIGHLIGHTS: 6-25

CONTENT:
## 创建 Vite 项目和安装依赖

### 1. 使用 Vite 创建项目

使用 Vite 脚手架创建一个新的 React + TypeScript 项目：

```bash
pnpm create vite@latest my-app --template react-ts
cd my-app
```

### 2. 安装项目依赖

进入项目目录后，安装所有依赖项：

```bash
pnpm install
```

### 3. 启动开发服务器

安装完成后，启动开发服务器：

```bash
pnpm run dev
```

期望结果：开发服务器成功启动，并在浏览器中可以访问网站，默认地址为 [http://localhost:5173](http://localhost:5173)

### 4. 项目脚本说明

项目的 package.json 中包含了几个有用的脚本：

- `dev`: 启动开发服务器
- `build`: 构建生产版本
- `lint`: 运行代码检查
- `preview`: 预览生产版本
--------------------
STEP: 配置 TailwindCSS

FILE: tailwind.config.js
LANGUAGE: javascript
CODE:
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```
HIGHLIGHTS: 1-15

CONTENT:
## 配置 TailwindCSS

TailwindCSS 是一个功能类优先的 CSS 框架，可以帮助我们快速构建现代化的用户界面。

### 1. 安装 TailwindCSS 及其依赖

在项目根目录下运行以下命令安装 TailwindCSS：

```bash
pnpm install -D tailwindcss postcss autoprefixer
pnpm dlx tailwindcss init -p
```

### 2. 配置 TailwindCSS

编辑 tailwind.config.js 文件，配置内容路径：

```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

### 3. 添加 Tailwind 指令到 CSS

在 src/index.css 文件中添加 Tailwind 的基础指令：

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### 4. 测试 TailwindCSS

在 App.tsx 中添加一些 TailwindCSS 类来测试配置是否成功：

```jsx
function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <h1 className="text-3xl font-bold text-purple-600">
        Hello, TailwindCSS!
      </h1>
    </div>
  )
}
```

重启开发服务器后，应该能看到应用了 TailwindCSS 样式的页面。
----------------------------------------
TITLE: 2-集成 ShadcnUI 和项目结构详解
DESCRIPTION: 学习如何在 React 项目中集成 ShadcnUI 组件库，理解项目目录结构和各部分的作用
DIFFICULTY: beginner
ESTIMATED_TIME: 35
PREREQUISITES: 完成第一节课的所有内容
TAGS: shadcnui, 项目结构, 组件库, ui-components

PROJECT_FILES:
src/
src/assets/
src/components/
src/components/ui/
src/lib/
src/App.tsx
src/main.tsx
src/index.css
components.json
package.json

STEPS:

STEP: 项目结构概览

FILE: package.json
LANGUAGE: json
CODE:
```json
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.55.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "typescript": "^5.2.2",
    "vite": "^5.0.8"
  }
}
```
HIGHLIGHTS: 1-30

CONTENT:
## 项目结构概览

让我们先了解一下项目的整体结构和各个目录的作用：

```
.
├── src/
│   ├── assets/           # 静态资源文件
│   ├── components/       # 组件目录
│   │   └── ui/           # ShadcnUI 组件
│   ├── lib/              # 工具函数和库
│   ├── App.tsx           # 主应用组件
│   ├── main.tsx          # 应用入口文件
│   └── index.css         # 全局样式文件
├── components.json       # ShadcnUI 配置文件
├── tailwind.config.js    # TailwindCSS 配置文件
├── postcss.config.js     # PostCSS 配置文件
├── vite.config.ts        # Vite 配置文件
├── package.json          # 项目依赖和脚本配置
└── index.html            # HTML 模板文件
```

### 各目录和文件的作用：

1. **src/assets/** - 存放图片、字体等静态资源
2. **src/components/** - 存放项目组件，其中 ui 子目录专门存放 ShadcnUI 组件
3. **src/lib/** - 存放工具函数、自定义 hooks 等可复用代码
4. **src/App.tsx** - 主应用组件
5. **src/main.tsx** - 应用入口文件，渲染根组件
6. **src/index.css** - 全局样式文件，包含 TailwindCSS 指令
7. **components.json** - ShadcnUI 配置文件
8. **tailwind.config.js** - TailwindCSS 配置文件
9. **vite.config.ts** - Vite 构建工具配置文件
--------------------
STEP: 集成 ShadcnUI 组件库

FILE: components.json
LANGUAGE: json
CODE:
```json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```
HIGHLIGHTS: 1-15

CONTENT:
## 集成 ShadcnUI 组件库

ShadcnUI 是一个基于 TailwindCSS 构建的组件库，提供了可复制粘贴的组件代码，可以根据需要自定义。

### 1. 安装 ShadcnUI

运行以下命令初始化 ShadcnUI：

```bash
npx shadcn-ui@latest init
```

在初始化过程中，会询问一些配置选项：
- Would you like to use TypeScript? › yes
- Which style would you like to use? › default
- Which color would you like to use as base color? › slate
- Where is your global CSS file? › src/index.css
- Do you want to use CSS variables for colors? › yes
- Where is your tailwind.config.js located? › tailwind.config.js
- Configure the import alias for components? › @/components
- Configure the import alias for utils? › @/lib/utils
- Are you using React Server Components? › no

### 2. 配置路径别名

为了让 TypeScript 能够正确解析路径别名，需要配置 vite.config.ts：

```typescript
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});
```

同时更新 tsconfig.json：

```json
{
  "compilerOptions": {
    // ... 其他配置
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  // ... 其他配置
}
```

### 3. 安装一个示例组件

让我们安装一个按钮组件来测试配置：

```bash
npx shadcn-ui@latest add button
```

安装完成后，可以在组件中使用：

```tsx
import { Button } from "@/components/ui/button"

function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-3xl font-bold text-purple-600 mb-4">
          Hello, ShadcnUI!
        </h1>
        <Button>Click me</Button>
      </div>
    </div>
  )
}
```
--------------------
STEP: 理解 ShadcnUI 组件工作机制

FILE: src/components/ui/button.tsx
LANGUAGE: typescript
CODE:
```typescript
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```
HIGHLIGHTS: 1-50

CONTENT:
## 理解 ShadcnUI 组件工作机制

ShadcnUI 组件是完全可自定义的，让我们通过 Button 组件来理解其工作机制。

### 1. 组件构成

ShadcnUI 组件主要由以下几部分构成：

1. **class-variance-authority (cva)** - 用于定义组件的样式变体
2. **@radix-ui/react-slot** - 用于处理 asChild 属性
3. **cn 辅助函数** - 用于合并 TailwindCSS 类名
4. **React.forwardRef** - 用于转发 ref

### 2. 样式变体

Button 组件使用 cva 定义了多种变体：

- variant: default, destructive, outline, secondary, ghost, link
- size: default, sm, lg, icon

使用示例：

```tsx
<Button variant="outline" size="lg">
  Large Outline Button
</Button>
```

### 3. asChild 属性

asChild 属性允许将组件的样式应用到其子组件上：

```tsx
<Button asChild>
  <Link to="/dashboard">Dashboard</Link>
</Button>
```

### 4. cn 辅助函数

cn 函数用于合并类名，处理条件类名：

```typescript
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

这种设计使组件既灵活又易于自定义。
----------------------------------------
TITLE: 3-自定义主题和扩展功能
DESCRIPTION: 学习如何自定义 TailwindCSS 主题，扩展 ShadcnUI 组件，以及添加新功能
DIFFICULTY: intermediate
ESTIMATED_TIME: 40
PREREQUISITES: 完成前两节课的所有内容
TAGS: tailwindcss, 主题定制, shadcnui, 扩展功能

PROJECT_FILES:
tailwind.config.js
src/index.css
src/lib/utils.ts
src/components/ui/
components.json

STEPS:

STEP: 自定义 TailwindCSS 主题

FILE: tailwind.config.js
LANGUAGE: javascript
CODE:
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```
HIGHLIGHTS: 1-30

CONTENT:
## 自定义 TailwindCSS 主题

TailwindCSS 允许我们通过配置文件自定义主题，包括颜色、间距、字体等。

### 1. 配置 CSS 变量

首先，在 src/index.css 中添加 CSS 变量来定义颜色：

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

### 2. 扩展主题配置

在 tailwind.config.js 中扩展主题：

```javascript
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        // ... 其他颜色配置
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      // ... 其他扩展配置
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```

这样就实现了可自定义的主题系统，支持亮色和暗色模式。
--------------------
STEP: 扩展 ShadcnUI 组件

FILE: src/components/ui/card.tsx
LANGUAGE: typescript
CODE:
```typescript
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
```
HIGHLIGHTS: 1-60

CONTENT:
## 扩展 ShadcnUI 组件

ShadcnUI 最大的优势之一是其组件是可复制粘贴的，这意味着我们可以轻松地扩展和自定义它们。

### 1. 添加新的 ShadcnUI 组件

让我们添加一个卡片(Card)组件：

```bash
npx shadcn-ui@latest add card
```

这将下载并添加 Card 组件到 src/components/ui/ 目录中。

### 2. 自定义现有组件

我们可以通过修改组件代码来自定义其行为和样式。例如，让我们修改 Button 组件，添加一个新的变体：

```typescript
const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        // 添加一个新的变体
        gradient: "bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:opacity-90"
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
```

现在可以使用新的变体：

import { Link, useLocation } from "react-router-dom";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { appNavigationConfig } from "@/components/navigation/app-nav-config";

interface AppSidebarNavProps extends React.HTMLAttributes<HTMLElement> {
  items: {
    href?: string;
    title: string;
    disabled?: boolean;
  }[];
}

export function AppSidebarNav({ className, items, ...props }: AppSidebarNavProps) {
  const location = useLocation();

  return (
    <ScrollArea className="h-full py-4">
      <nav
        className={cn(
          "flex space-x-2 lg:flex-col lg:space-x-0 lg:space-y-1",
          className
        )}
        {...props}
      >
        {appNavigationConfig.map((group) => (
          <div key={group.title} className="pb-4">
            <h4 className="mb-1 rounded-md px-2 py-1 text-sm font-semibold">
              {group.title}
            </h4>
            <div className="grid grid-cols-1 gap-1">
              {group.items.map((item) => (
                <Link
                  key={item.href}
                  to={item.href || "#"}
                  className={cn(
                    buttonVariants({ variant: "ghost" }),
                    item.disabled && "cursor-not-allowed opacity-60",
                    location.pathname === item.href
                      ? "bg-muted hover:bg-muted"
                      : "hover:bg-transparent hover:underline",
                    "justify-start"
                  )}
                >
                  {item.icon && <span className="mr-2">{item.icon}</span>}
                  {item.title}
                </Link>
              ))}
            </div>
          </div>
        ))}
      </nav>
    </ScrollArea>
  );
}
export interface AppNavItem {
  title: string;
  href?: string;
  disabled?: boolean;
  external?: boolean;
  icon?: React.ReactNode;
  label?: string;
}

export interface AppNavGroup {
  title: string;
  items: AppNavItem[];
}

// 基于企业管理系统的导航示例
export const appNavigationConfig: AppNavGroup[] = [
  {
    title: "概览",
    items: [
      {
        title: "仪表板",
        href: "/dashboard",
        icon: "DashboardIcon",
      },
    ],
  },
  {
    title: "业务管理",
    items: [
      {
        title: "客户管理",
        href: "/customers",
        icon: "UsersIcon",
      },
      {
        title: "订单管理",
        href: "/orders",
        icon: "ShoppingCartIcon",
      },
      {
        title: "产品管理",
        href: "/products",
        icon: "PackageIcon",
      },
    ],
  },
  {
    title: "数据分析",
    items: [
      {
        title: "销售报表",
        href: "/reports/sales",
        icon: "BarChartIcon",
      },
      {
        title: "用户分析",
        href: "/reports/users",
        icon: "ActivityIcon",
      },
    ],
  },
  {
    title: "系统管理",
    items: [
      {
        title: "用户管理",
        href: "/admin/users",
        icon: "UserIcon",
      },
      {
        title: "角色权限",
        href: "/admin/roles",
        icon: "LockIcon",
      },
      {
        title: "系统设置",
        href: "/admin/settings",
        icon: "SettingsIcon",
      },
    ],
  },
];
# 新应用的用户需求分析

## 目标用户画像

### 1. 企业管理者
- 角色特征：需要查看业务数据和关键指标
- 使用场景：日常业务监控、决策支持
- 需求：数据可视化、报表功能、权限管理

### 2. 操作员/员工
- 角色特征：执行具体业务操作
- 使用场景：数据录入、任务处理、信息查询
- 需求：操作简便、流程清晰、响应快速

### 3. 客户/外部用户
- 角色特征：使用应用的部分功能
- 使用场景：查看信息、提交请求、自助服务
- 需求：界面友好、功能明确、易于理解

## 功能需求分析

### 核心功能模块
1. 仪表板/首页 - 提供关键指标概览
2. 数据管理 - 数据的增删改查操作
3. 报表统计 - 数据分析和可视化展示
4. 用户管理 - 用户权限和角色管理
5. 系统设置 - 应用配置和参数调整

### 扩展功能模块
1. 通知提醒 - 消息推送和提醒功能
2. 工作流程 - 业务流程自动化
3. 集成接口 - 第三方系统集成
4. 移动端适配 - 响应式设计和移动体验
```tsx
<Button variant="gradient">Gradient Button</Button>
```

### 3. 创建自定义组件

我们也可以基于现有组件创建完全自定义的组件。例如，创建一个带有图标的按钮：

```tsx
import { Button, buttonVariants } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { Slot } from "@radix-ui/react-slot"
import * as React from "react"

interface IconButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  icon: React.ReactNode
  asChild?: boolean
}

const IconButton = React.forwardRef<HTMLButtonElement, IconButtonProps>(
  ({ icon, asChild = false, className, children, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(
          buttonVariants({ variant: "ghost", size: "icon" }),
          className
        )}
        ref={ref}
        {...props}
      >
        {icon}
        {children}
      </Comp>
    )
  }
)
IconButton.displayName = "IconButton"

export { IconButton }
```

这种扩展方式使我们能够根据项目需求灵活地定制组件。
--------------------
STEP: 添加动画和交互功能

FILE: src/lib/utils.ts
LANGUAGE: typescript
CODE:
```typescript
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { cubicOut } from "framer-motion"
import { type Transition } from "framer-motion"

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs))
}

type FlyAndScaleProps = {
    y: number
    x: number
    start: number
    end: number
}

export const flyAndScale = (
    _: HTMLElement,
    options: FlyAndScaleProps = {
        y: -8,
        x: 0,
        start: 0.95,
        end: 1,
    },
): Transition => {
    return {
        duration: 0.2,
        ease: [0.215, 0.61, 0.355, 1],
        ...options,
    }
}
```
HIGHLIGHTS: 1-20

CONTENT:
## 添加动画和交互功能

为了提升用户体验，我们可以添加动画和交互功能到我们的应用中。

### 1. 安装动画库

首先安装 framer-motion 动画库：

```bash
pnpm add framer-motion
pnpm add -D @types/framer-motion
```

### 2. 创建动画工具函数

在 src/lib/utils.ts 中添加动画相关的工具函数：

```typescript
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { cubicOut } from "framer-motion"
import { type Transition } from "framer-motion"

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs))
}

type FlyAndScaleProps = {
    y: number
    x: number
    start: number
    end: number
}

export const flyAndScale = (
    _: HTMLElement,
    options: FlyAndScaleProps = {
        y: -8,
        x: 0,
        start: 0.95,
        end: 1,
    },
): Transition => {
    return {
        duration: 0.2,
        ease: [0.215, 0.61, 0.355, 1],
        ...options,
    }
}
```

### 3. 创建带动画的组件

创建一个带动画效果的 Tooltip 组件：

```tsx
import { motion, AnimatePresence } from "framer-motion"
import { cn } from "@/lib/utils"
import { ReactNode, useState } from "react"

interface TooltipProps {
  children: ReactNode
  content: ReactNode
  side?: "top" | "right" | "bottom" | "left"
}

export function Tooltip({ children, content, side = "top" }: TooltipProps) {
  const [isVisible, setIsVisible] = useState(false)

  const sideClasses = {
    top: "bottom-full left-1/2 transform -translate-x-1/2 mb-2",
    right: "left-full top-1/2 transform -translate-y-1/2 ml-2",
    bottom: "top-full left-1/2 transform -translate-x-1/2 mt-2",
    left: "right-full top-1/2 transform -translate-y-1/2 mr-2",
  }

  const sideTransformOrigin = {
    top: "bottom center",
    right: "left center",
    bottom: "top center",
    left: "right center",
  }

  return (
    <div 
      className="inline-block relative"
      onMouseEnter={() => setIsVisible(true)}
      onMouseLeave={() => setIsVisible(false)}
    >
      {children}
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{ duration: 0.2 }}
            className={cn(
              "absolute z-50 px-3 py-1.5 text-sm bg-popover text-popover-foreground rounded-md border shadow-md whitespace-nowrap",
              sideClasses[side]
            )}
            style={{ originX: 0.5, originY: 0.5 }}
          >
            <div className="relative">
              {content}
              <div 
                className="absolute w-2 h-2 bg-popover border border-border transform rotate-45"
                style={{
                  top: side === "bottom" ? "-4px" : side === "top" ? "calc(100% - 4px)" : "calc(50% - 4px)",
                  left: side === "right" ? "-4px" : side === "left" ? "calc(100% - 4px)" : "calc(50% - 4px)",
                }}
              />
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}
```

### 4. 使用带动画的组件

```tsx
import { Tooltip } from "@/components/ui/tooltip"
import { Button } from "@/components/ui/button"
import { InfoIcon } from "lucide-react"

function App() {
  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Tooltip content="这是一个带有动画效果的提示信息" side="top">
        <Button variant="outline" size="icon">
          <InfoIcon className="h-4 w-4" />
        </Button>
      </Tooltip>
    </div>
  )
}
```

通过这种方式，我们可以为应用添加流畅的动画效果，提升用户体验。
----------------------------------------
TITLE: 4-用户需求分析与导航设计
DESCRIPTION: 学习如何根据目标用户需求设计导航结构，包括用户旅程分析和导航设计过程
DIFFICULTY: intermediate
ESTIMATED_TIME: 45
PREREQUISITES: 完成前三节课的所有内容
TAGS: 用户需求, 导航设计, 用户旅程, 信息架构

PROJECT_FILES:
src/
src/app/
src/components/
src/components/layout/
src/components/navigation/
src/hooks/

STEPS:

STEP: 分析目标用户和功能需求

FILE: src/app/user-research.md
LANGUAGE: markdown
CODE:
```markdown
# 用户需求分析

## 目标用户画像

### 1. 初级用户
- 技术背景：刚接触前端开发的新手开发者
- 需求：快速搭建项目、学习最佳实践
- 痛点：不熟悉工具链、缺乏项目结构经验

### 2. 中级用户
- 技术背景：有一定前端开发经验的工程师
- 需求：高效的开发流程、可扩展的架构
- 痛点：项目维护困难、组件复用性差

### 3. 高级用户
- 技术背景：资深前端架构师
- 需求：高度可定制、性能优化、团队协作
- 痛点：技术债务、团队规范不统一

## 功能需求分析

### 核心功能
1. 项目初始化和配置
2. 组件库集成和使用
3. 样式系统定制
4. 路由管理
5. 状态管理

### 扩展功能
1. 国际化支持
2. 主题切换
3. 权限控制
4. 数据可视化
5. 性能监控
```
HIGHLIGHTS: 1-40

CONTENT:
## 分析目标用户和功能需求

在设计任何应用程序之前，了解目标用户和他们的需求是至关重要的。这将直接影响我们的导航设计和功能结构。

### 1. 创建用户画像

首先，我们需要定义目标用户群体。在我们的 React 模板项目中，主要有三类用户：

1. **初级用户** - 刚接触前端开发的新手开发者
   - 他们需要清晰的文档和示例
   - 希望快速上手，避免复杂的配置
   - 需要学习最佳实践

2. **中级用户** - 有一定前端开发经验的工程师
   - 关注开发效率和代码质量
   - 需要可扩展和可维护的架构
   - 希望有良好的组件复用性

3. **高级用户** - 资深前端架构师
   - 需要高度可定制的解决方案
   - 关注性能优化和团队协作
   - 需要解决技术债务问题

### 2. 功能需求分析

基于用户画像，我们可以分析出不同用户的功能需求：

#### 核心功能需求：
- 项目初始化和配置
- 组件库集成和使用
- 样式系统定制
- 路由管理
- 状态管理

#### 扩展功能需求：
- 国际化支持
- 主题切换
- 权限控制
- 数据可视化
- 性能监控

### 3. 用户旅程映射

了解用户在使用我们模板时的旅程可以帮助我们设计更好的导航：

1. **发现阶段** - 用户寻找合适的模板
2. **评估阶段** - 用户评估模板是否满足需求
3. **入门阶段** - 用户开始使用模板构建项目
4. **扩展阶段** - 用户根据项目需求扩展功能
5. **维护阶段** - 用户维护和优化项目

通过分析这些阶段，我们可以确定在每个阶段用户需要什么信息和功能，从而设计出符合用户期望的导航结构。
--------------------
STEP: 设计导航结构和信息架构

FILE: src/components/navigation/nav-config.ts
LANGUAGE: typescript
CODE:
```typescript
// 保留此文件但清空内容，因为我们不再需要它
```
HIGHLIGHTS: 1-70

CONTENT:
## 设计导航结构和信息架构

基于用户需求分析，我们需要设计一个清晰、直观的导航结构，让用户能够轻松找到所需信息。

### 1. 信息架构原则

在设计导航结构时，我们需要遵循以下原则：

1. **层次清晰** - 将相关内容组织在一起
2. **逻辑性强** - 按照用户使用流程或功能相关性组织
3. **易于理解** - 使用用户熟悉的术语
4. **易于查找** - 重要功能应该容易找到

### 2. 导航结构设计

根据我们的用户需求分析，我们可以将导航分为以下几个主要部分：

#### 入门部分
- 快速开始指南
- 项目结构说明
- 开发环境配置

#### 核心功能部分
- 组件库使用
- 样式系统定制
- 路由管理
- 状态管理

#### 扩展功能部分
- 国际化支持
- 主题切换
- 权限控制

#### 部署部分
- 构建优化
- 部署指南

### 3. 导航设计实现

我们可以创建一个配置文件来管理导航项：

```typescript
export interface NavItem {
  title: string;
  href?: string;
  disabled?: boolean;
  external?: boolean;
  icon?: React.ReactNode;
  label?: string;
}

export interface NavGroup {
  title: string;
  items: NavItem[];
}

export const navigationConfig: NavGroup[] = [
  {
    title: "入门",
    items: [
      {
        title: "快速开始",
        href: "/docs/getting-started",
      },
      // ... 其他项
    ],
  },
  // ... 其他组
];
```

这种配置驱动的方法使我们能够轻松地修改和扩展导航结构，而无需更改组件代码。

### 4. 用户旅程与导航映射

将用户旅程与导航结构相结合：

1. **发现和评估阶段** - 重点展示快速开始和项目结构文档
2. **入门阶段** - 提供详细的开发环境配置指南
3. **扩展阶段** - 突出核心功能和扩展功能文档
4. **维护阶段** - 强调部署和优化相关内容

通过这种方式，我们可以确保导航结构与用户实际使用流程相匹配。
--------------------
STEP: 创建用户旅程和导航原型

FILE: src/components/layout/sidebar-nav.tsx
LANGUAGE: typescript
CODE:
```typescript
import { Link, useLocation } from "react-router-dom";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { appNavigationConfig } from "@/components/navigation/app-nav-config";

interface AppSidebarNavProps extends React.HTMLAttributes<HTMLElement> {
  items: {
    href?: string;
    title: string;
    disabled?: boolean;
  }[];
}

export function AppSidebarNav({ className, items, ...props }: AppSidebarNavProps) {
  const location = useLocation();

  return (
    <ScrollArea className="h-full py-4">
      <nav
        className={cn(
          "flex space-x-2 lg:flex-col lg:space-x-0 lg:space-y-1",
          className
        )}
        {...props}
      >
        {appNavigationConfig.map((group) => (
          <div key={group.title} className="pb-4">
            <h4 className="mb-1 rounded-md px-2 py-1 text-sm font-semibold">
              {group.title}
            </h4>
            <div className="grid grid-cols-1 gap-1">
              {group.items.map((item) => (
                <Link
                  key={item.href}
                  to={item.href || "#"}
                  className={cn(
                    buttonVariants({ variant: "ghost" }),
                    item.disabled && "cursor-not-allowed opacity-60",
                    location.pathname === item.href
                      ? "bg-muted hover:bg-muted"
                      : "hover:bg-transparent hover:underline",
                    "justify-start"
                  )}
                >
                  {item.icon && <span className="mr-2">{item.icon}</span>}
                  {item.title}
                </Link>
              ))}
            </div>
          </div>
        ))}
      </nav>
    </ScrollArea>
  );
}

/**
 * 关于ShadcnUI组件安装：
 * 
 * ShadcnUI的components/ui中的组件可以通过命令安装。
 * ShadcnUI提供了CLI工具，可以方便地添加组件到项目中：
 * 
 * ```bash
 * # 安装特定组件（例如 button）
 * npx shadcn-ui@latest add button
 * 
 * # 安装多个组件
 * npx shadcn-ui@latest add button card input
 * 
 * # 查看可用组件列表
 * npx shadcn-ui@latest add
 * ```
 * 
 * 这种方式的好处是：
 * 1. 自动下载组件代码到您的项目中
 * 2. 根据您的项目配置自动调整组件代码
 * 3. 保持组件与您项目的一致性
 * 4. 可以随时更新或添加新组件
 */
```
HIGHLIGHTS: 1-50

CONTENT:
## 创建用户旅程和导航原型

在设计好导航结构后，我们需要创建一个可视化的原型来验证我们的设计是否符合用户需求。

### 1. 创建导航组件原型

我们可以基于之前的导航配置创建一个侧边栏导航组件：

```tsx
import { Link } from "react-router-dom";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { navigationConfig } from "@/components/navigation/nav-config";

interface SidebarNavProps extends React.HTMLAttributes<HTMLElement> {
  items: {
    href?: string;
    title: string;
    disabled?: boolean;
  }[];
}

export function SidebarNav({ className, items, ...props }: SidebarNavProps) {
  // 获取当前路径
  const location = window.location.pathname;

  return (
    <ScrollArea className="h-full py-4">
      <nav
        className={cn(
          "flex space-x-2 lg:flex-col lg:space-x-0 lg:space-y-1",
          className
        )}
        {...props}
      >
        {navigationConfig.map((group) => (
          <div key={group.title} className="pb-4">
            <h4 className="mb-1 rounded-md px-2 py-1 text-sm font-semibold">
              {group.title}
            </h4>
            <div className="grid grid-cols-2 lg:grid-cols-1 gap-1">
              {group.items.map((item) => (
                <Link
                  key={item.href}
                  to={item.href || "#"}
                  className={cn(
                    buttonVariants({ variant: "ghost" }),
                    item.disabled && "cursor-not-allowed opacity-60",
                    location === item.href
                      ? "bg-muted hover:bg-muted"
                      : "hover:bg-transparent hover:underline",
                    "justify-start"
                  )}
                >
                  {item.title}
                </Link>
              ))}
            </div>
          </div>
        ))}
      </nav>
    </ScrollArea>
  );
}
```

### 2. 用户旅程验证

通过创建原型，我们可以验证导航设计是否符合用户旅程：

1. **发现阶段** - 用户可以快速找到"快速开始"和"项目结构"文档
2. **入门阶段** - "开发环境"配置指南在导航中清晰可见
3. **扩展阶段** - 核心功能和扩展功能文档分类明确
4. **维护阶段** - 部署相关文档易于查找

### 3. 导航可用性测试

在实际应用中，我们可以通过以下方式测试导航的可用性：

1. **用户测试** - 邀请目标用户尝试完成特定任务
2. **热图分析** - 分析用户点击热点区域
3. **A/B测试** - 比较不同导航结构的效果
4. **数据分析** - 跟踪用户在导航中的行为路径

### 4. 迭代优化

基于测试结果，我们可以对导航结构进行迭代优化：

1. 调整导航项的顺序和分组
2. 优化导航标签的表述
3. 增加搜索功能以提高查找效率
4. 添加面包屑导航以改善用户定位

通过这种以用户为中心的设计方法，我们可以创建出既符合用户需求又易于使用的导航系统。
----------------------------------------
TITLE: 5-组织 UI 导航和功能结构
DESCRIPTION: 学习如何组织应用的 UI 导航结构，设计合理的功能模块划分
DIFFICULTY: intermediate
ESTIMATED_TIME: 45
PREREQUISITES: 完成前四节课的所有内容
TAGS: 导航, 布局, 路由, 功能结构, 组件组织

PROJECT_FILES:
src/
src/app/
src/app/layout.tsx
src/app/page.tsx
src/app/dashboard/
src/app/settings/
src/components/
src/components/layout/
src/components/navigation/
src/components/ui/
src/lib/
src/hooks/

STEPS:

STEP: 设计应用布局结构

FILE: src/components/layout/app-layout.tsx
LANGUAGE: typescript
CODE:
```typescript
import { Sidebar } from "@/components/layout/sidebar"
import { Header } from "@/components/layout/header"
import { cn } from "@/lib/utils"

interface AppLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}

export function AppLayout({ children, className, ...props }: AppLayoutProps) {
  return (
    <div className="flex min-h-screen">
      <Sidebar />
      <div className="flex flex-col flex-1">
        <Header />
        <main className={cn("flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto", className)} {...props}>
          {children}
        </main>
      </div>
    </div>
  )
}
```
HIGHLIGHTS: 1-60

CONTENT:
## 设计应用布局结构

一个良好的应用布局结构对于用户体验至关重要。让我们设计一个包含侧边栏和顶栏的应用布局。

### 1. 创建布局组件

首先创建应用的主布局组件：

```bash
mkdir -p src/components/layout
touch src/components/layout/app-layout.tsx
touch src/components/layout/header.tsx
touch src/components/layout/sidebar.tsx
```

### 2. 实现主布局

在 src/components/layout/app-layout.tsx 中实现主布局：

```tsx
import { Sidebar } from "@/components/layout/sidebar"
import { Header } from "@/components/layout/header"
import { cn } from "@/lib/utils"

interface AppLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}

export function AppLayout({ children, className, ...props }: AppLayoutProps) {
  return (
    <div className="flex min-h-screen">
      <Sidebar />
      <div className="flex flex-col flex-1">
        <Header />
        <main className={cn("flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto", className)} {...props}>
          {children}
        </main>
      </div>
    </div>
  )
}
```

### 3. 创建侧边栏组件

在 src/components/layout/sidebar.tsx 中实现侧边栏：

```tsx
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { 
  HomeIcon, 
  SettingsIcon, 
  BarChartIcon, 
  UsersIcon,
  FileTextIcon
} from "lucide-react"
import { Link } from "react-router-dom"

const navigation = [
  { name: "仪表板", href: "/", icon: HomeIcon },
  { name: "统计", href: "/analytics", icon: BarChartIcon },
  { name: "用户", href: "/users", icon: UsersIcon },
  { name: "文档", href: "/documents", icon: FileTextIcon },
  { name: "设置", href: "/settings", icon: SettingsIcon },
]

export function Sidebar() {
  return (
    <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0">
      <div className="flex flex-col flex-grow pt-5 bg-card border-r">
        <div className="flex items-center justify-center flex-shrink-0 px-4">
          <div className="text-2xl font-bold text-primary">MyApp</div>
        </div>
        <div className="mt-5 flex-1 flex flex-col">
          <nav className="flex-1 px-2 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                to={item.href}
                className="group flex items-center px-2 py-2 text-sm font-medium rounded-md hover:bg-accent"
              >
                <item.icon className="mr-3 flex-shrink-0 h-6 w-6 text-muted-foreground" />
                {item.name}
              </Link>
            ))}
          </nav>
        </div>
      </div>
    </div>
  )
}
```

### 4. 创建顶栏组件

在 src/components/layout/header.tsx 中实现顶栏：

```tsx
import { Button } from "@/components/ui/button"
import { MenuIcon, BellIcon, UserIcon } from "lucide-react"

export function Header() {
  return (
    <header className="sticky top-0 z-10 bg-background border-b">
      <div className="flex items-center justify-between px-4 py-3 md:px-6">
        <div className="flex items-center">
          <Button variant="ghost" size="icon" className="md:hidden">
            <MenuIcon className="h-6 w-6" />
          </Button>
          <div className="ml-4 md:ml-0 text-lg font-semibold">Dashboard</div>
        </div>
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="icon">
            <BellIcon className="h-5 w-5" />
          </Button>
          <Button variant="ghost" size="icon">
            <UserIcon className="h-5 w-5" />
          </Button>
        </div>
      </div>
    </header>
  )
}
```

这样的布局结构为应用提供了一个清晰的导航框架，用户可以轻松地在不同功能模块之间切换。
--------------------
STEP: 实现路由和导航功能

FILE: src/app/routes.tsx
LANGUAGE: typescript
CODE:
```typescript
import { createBrowserRouter, RouterProvider } from "react-router-dom"
import { AppLayout } from "@/components/layout/app-layout"
import { DashboardPage } from "@/app/dashboard/page"
import { SettingsPage } from "@/app/settings/page"
import { AnalyticsPage } from "@/app/analytics/page"
import { UsersPage } from "@/app/users/page"
import { DocumentsPage } from "@/app/documents/page"

const router = createBrowserRouter([
  {
    path: "/",
    element: <AppLayout />,
    children: [
      { index: true, element: <DashboardPage /> },
      { path: "analytics", element: <AnalyticsPage /> },
      { path: "users", element: <UsersPage /> },
      { path: "documents", element: <DocumentsPage /> },
      { path: "settings", element: <SettingsPage /> },
    ],
  },
])

export function Routes() {
  return <RouterProvider router={router} />
}
```
HIGHLIGHTS: 1-40

CONTENT:
## 实现路由和导航功能

路由是现代前端应用的核心功能之一，它允许用户在不同页面之间导航。

### 1. 安装 React Router

首先安装 React Router：

```bash
pnpm add react-router-dom
pnpm add -D @types/react-router-dom
```

### 2. 配置路由

创建路由配置文件 src/app/routes.tsx：

```tsx
import { createBrowserRouter, RouterProvider } from "react-router-dom"
import { AppLayout } from "@/components/layout/app-layout"
import { DashboardPage } from "@/app/dashboard/page"
import { SettingsPage } from "@/app/settings/page"
import { AnalyticsPage } from "@/app/analytics/page"
import { UsersPage } from "@/app/users/page"
import { DocumentsPage } from "@/app/documents/page"

const router = createBrowserRouter([
  {
    path: "/",
    element: <AppLayout />,
    children: [
      { index: true, element: <DashboardPage /> },
      { path: "analytics", element: <AnalyticsPage /> },
      { path: "users", element: <UsersPage /> },
      { path: "documents", element: <DocumentsPage /> },
      { path: "settings", element: <SettingsPage /> },
    ],
  },
])

export function Routes() {
  return <RouterProvider router={router} />
}
```

### 3. 创建页面组件

创建示例页面组件：

```bash
mkdir -p src/app/dashboard src/app/settings src/app/analytics src/app/users src/app/documents
touch src/app/dashboard/page.tsx
touch src/app/settings/page.tsx
touch src/app/analytics/page.tsx
touch src/app/users/page.tsx
touch src/app/documents/page.tsx
```

创建仪表板页面 src/app/dashboard/page.tsx：

```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export function DashboardPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">仪表板</h1>
        <p className="text-muted-foreground">欢迎来到您的仪表板</p>
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">总营收</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">$45,231.89</div>
            <p className="text-xs text-muted-foreground">+20.1% 相比上月</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">订阅数</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+12,234</div>
            <p className="text-xs text-muted-foreground">+180.1% 相比上月</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">销售额</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+12,234</div>
            <p className="text-xs text-muted-foreground">+19% 相比上月</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">活跃用户</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+573</div>
            <p className="text-xs text-muted-foreground">+201 相比上小时</p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
```

### 4. 更新主应用文件

更新 src/App.tsx 来使用路由：

```tsx
import { Routes } from "@/app/routes"

function App() {
  return <Routes />
}

export default App
```

现在应用具有完整的路由功能，用户可以在不同页面之间导航。
--------------------
STEP: 设计功能模块结构

FILE: src/app/dashboard/page.tsx
LANGUAGE: typescript
CODE:
```typescript
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  ActivityIcon, 
  CreditCardIcon, 
  DollarSignIcon, 
  UsersIcon,
  EyeIcon,
  EyeOffIcon
} from "lucide-react"
import { useState } from "react"

export function DashboardPage() {
  const [showValues, setShowValues] = useState(true)

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">仪表板</h1>
          <p className="text-muted-foreground">欢迎来到您的仪表板</p>
        </div>
        <Button 
          variant="outline" 
          size="sm"
          onClick={() => setShowValues(!showValues)}
        >
          {showValues ? <EyeOffIcon className="h-4 w-4" /> : <EyeIcon className="h-4 w-4" />}
          {showValues ? "隐藏" : "显示"} 数值
        </Button>
      </div>
      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">概览</TabsTrigger>
          <TabsTrigger value="analytics">分析</TabsTrigger>
          <TabsTrigger value="reports">报告</TabsTrigger>
          <TabsTrigger value="notifications">通知</TabsTrigger>
        </TabsList>
        <TabsContent value="overview" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">总营收</CardTitle>
                <DollarSignIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {showValues ? "$45,231.89" : "••••••"}
                </div>
                <p className="text-xs text-muted-foreground">+20.1% 相比上月</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">订阅数</CardTitle>
                <UsersIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {showValues ? "+12,234" : "••••••"}
                </div>
                <p className="text-xs text-muted-foreground">+180.1% 相比上月</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">销售额</CardTitle>
                <CreditCardIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {showValues ? "+12,234" : "••••••"}
                </div>
                <p className="text-xs text-muted-foreground">+19% 相比上月</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">活跃用户</CardTitle>
                <ActivityIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {showValues ? "+573" : "••••••"}
                </div>
                <p className="text-xs text-muted-foreground">+201 相比上小时</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
```
HIGHLIGHTS: 1-50

CONTENT:
## 设计功能模块结构

一个良好的功能模块结构有助于代码的维护和扩展。让我们以仪表板为例，展示如何组织功能模块。

### 1. 功能模块划分原则

在设计功能模块时，我们应该遵循以下原则：

1. **单一职责原则** - 每个模块只负责一个功能
2. **可复用性** - 组件和功能应该设计为可复用的
3. **可扩展性** - 模块应该易于扩展新功能
4. **清晰的接口** - 模块之间通过清晰的接口进行通信

### 2. 仪表板功能模块示例

以仪表板为例，我们可以将其划分为以下功能模块：

1. **数据概览模块** - 显示关键业务指标
2. **图表分析模块** - 以图表形式展示数据趋势
3. **最近活动模块** - 显示最近的用户活动
4. **快速操作模块** - 提供常用功能的快捷入口

### 3. 实现交互功能

在仪表板中添加交互功能，如隐藏敏感数据：

```tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { 
  EyeIcon, 
  EyeOffIcon,
  DollarSignIcon,
  UsersIcon,
  CreditCardIcon,
  ActivityIcon
} from "lucide-react"
import { useState } from "react"

export function DashboardPage() {
  const [showValues, setShowValues] = useState(true)

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">仪表板</h1>
          <p className="text-muted-foreground">欢迎来到您的仪表板</p>
        </div>
        <Button 
          variant="outline" 
          size="sm"
          onClick={() => setShowValues(!showValues)}
        >
          {showValues ? <EyeOffIcon className="h-4 w-4" /> : <EyeIcon className="h-4 w-4" />}
          {showValues ? "隐藏" : "显示"} 数值
        </Button>
      </div>
      {/* ... 其他内容 */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">总营收</CardTitle>
            <DollarSignIcon className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {showValues ? "$45,231.89" : "••••••"}
            </div>
            <p className="text-xs text-muted-foreground">+20.1% 相比上月</p>
          </CardContent>
        </Card>
        {/* ... 其他卡片 */}
      </div>
    </div>
  )
}
```

### 4. 使用标签页组织内容

使用标签页来组织不同类型的内容：

```tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export function DashboardPage() {
  return (
    <div className="space-y-6">
      {/* ... 其他内容 */}
      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">概览</TabsTrigger>
          <TabsTrigger value="analytics">分析</TabsTrigger>
          <TabsTrigger value="reports">报告</TabsTrigger>
          <TabsTrigger value="notifications">通知</TabsTrigger>
        </TabsList>
        <TabsContent value="overview" className="space-y-4">
          {/* 概览内容 */}
        </TabsContent>
        <TabsContent value="analytics">
          {/* 分析内容 */}
        </TabsContent>
        {/* ... 其他标签页内容 */}
      </Tabs>
    </div>
  )
}
```

通过这种方式，我们可以创建结构清晰、易于维护和扩展的应用程序。
----------------------------------------
TITLE: 6-UI 效果设计和实现过程
DESCRIPTION: 学习如何设计 UI 效果，包括设计原则、实现过程和最佳实践
DIFFICULTY: intermediate
ESTIMATED_TIME: 50
PREREQUISITES: 完成前五节课的所有内容
TAGS: ui-design, 设计原则, 动画效果, 用户体验

PROJECT_FILES:
src/
src/components/
src/components/ui/
src/lib/
src/styles/
src/hooks/

STEPS:

STEP: 确定 UI 设计原则

FILE: src/styles/design-principles.md
LANGUAGE: markdown
CODE:
```markdown
# UI 设计原则

## 1. 一致性原则 (Consistency)
- 保持整个应用的视觉风格统一
- 统一的交互模式和导航结构
- 一致的颜色、字体和间距系统

## 2. 简洁性原则 (Simplicity)
- 避免不必要的复杂性
- 清晰的信息层次结构
- 减少用户的认知负担

## 3. 可用性原则 (Usability)
- 界面元素易于理解和使用
- 提供清晰的反馈和引导
- 优化用户操作流程

## 4. 可访问性原则 (Accessibility)
- 支持键盘导航
- 合适的颜色对比度
- 语义化的 HTML 结构

## 5. 响应式设计原则 (Responsive Design)
- 适配不同屏幕尺寸
- 灵活的布局和组件
- 触摸友好的交互元素

## 6. 性能原则 (Performance)
- 优化加载时间和渲染性能
- 合理使用动画效果
- 减少不必要的重绘和回流
```
HIGHLIGHTS: 1-30

CONTENT:
## 确定 UI 设计原则

在开始设计 UI 效果之前，我们需要明确一些核心设计原则，这些原则将指导我们做出设计决策。

### 1. 一致性原则

一致性是良好 UI 设计的基础。用户应该在整个应用中体验到统一的视觉风格和交互模式。

实现方法：
- 建立设计系统，定义颜色、字体、间距等规范
- 统一组件的样式和行为
- 保持导航结构的一致性

### 2. 简洁性原则

简洁的界面更容易理解和使用。我们应该避免不必要的复杂性，让用户能够专注于核心任务。

实现方法：
- 移除不必要的元素
- 使用清晰的信息层次结构
- 提供直观的操作流程

### 3. 可用性原则

界面应该易于使用，用户能够轻松完成任务并获得清晰的反馈。

实现方法：
- 提供明确的操作指引
- 设计直观的交互元素
- 给出及时的操作反馈

### 4. 可访问性原则

确保所有用户，包括残障人士，都能够使用我们的应用。

实现方法：
- 遵循 WCAG 可访问性标准
- 提供足够的颜色对比度
- 支持键盘导航和屏幕阅读器

### 5. 响应式设计原则

现代应用需要在各种设备和屏幕尺寸上都能良好显示。

实现方法：
- 使用弹性布局和网格系统
- 适配不同的屏幕断点
- 优化触摸交互体验

### 6. 性能原则

良好的性能是用户体验的重要组成部分。

实现方法：
- 优化图片和资源加载
- 合理使用动画效果
- 减少不必要的重绘和回流

通过遵循这些设计原则，我们可以创建出既美观又实用的 UI 效果。
--------------------
STEP: 设计和实现动画效果

FILE: src/lib/animations.ts
LANGUAGE: typescript
CODE:
```typescript
import { Variants } from "framer-motion";

// 页面切换动画
export const pageVariants: Variants = {
  initial: {
    opacity: 0,
    y: 20,
  },
  enter: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.3,
      ease: "easeOut",
    },
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.2,
      ease: "easeIn",
    },
  },
};

// 卡片动画
export const cardVariants: Variants = {
  initial: {
    opacity: 0,
    y: 30,
  },
  enter: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.4,
      ease: "easeOut",
    },
  },
};

// 悬停效果
export const hoverVariants: Variants = {
  hover: {
    scale: 1.02,
    transition: {
      duration: 0.2,
      ease: "easeInOut",
    },
  },
};

// 按钮点击效果
export const tapVariants: Variants = {
  tap: {
    scale: 0.98,
    transition: {
      duration: 0.1,
      ease: "easeInOut",
    },
  },
};
```
HIGHLIGHTS: 1-50

CONTENT:
## 设计和实现动画效果

动画效果可以显著提升用户体验，使界面更加生动和直观。让我们看看如何设计和实现这些效果。

### 1. 动画设计原则

在设计动画效果时，我们需要遵循以下原则：

1. **目的明确** - 每个动画都应该有明确的目的，如提供反馈、引导注意力或改善用户体验
2. **性能良好** - 动画不应该影响应用性能
3. **时长合适** - 动画时长应该适中，既不能太快也不能太慢
4. **风格统一** - 所有动画应该保持一致的风格和节奏

### 2. 常用动画类型

#### 页面切换动画
页面切换动画可以帮助用户理解页面之间的关系和导航方向。

```typescript
// 页面切换动画
export const pageVariants: Variants = {
  initial: {
    opacity: 0,
    y: 20,
  },
  enter: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.3,
      ease: "easeOut",
    },
  },
  exit: {
    opacity: 0,
    y: -20,
    transition: {
      duration: 0.2,
      ease: "easeIn",
    },
  },
};
```

#### 组件进入动画
组件进入动画可以让界面元素以更自然的方式出现。

```typescript
// 卡片动画
export const cardVariants: Variants = {
  initial: {
    opacity: 0,
    y: 30,
  },
  enter: {
    opacity: 1,
    y: 0,
    transition: {
      duration: 0.4,
      ease: "easeOut",
    },
  },
};
```

### 3. 交互状态动画

#### 悬停效果
悬停效果可以增强用户交互体验。

```typescript
// 悬停效果
export const hoverVariants: Variants = {
  hover: {
    scale: 1.02,
    transition: {
      duration: 0.2,
      ease: "easeInOut",
    },
  },
};
```

#### 点击效果
点击效果可以提供即时的触觉反馈。

```typescript
// 按钮点击效果
export const tapVariants: Variants = {
  tap: {
    scale: 0.98,
    transition: {
      duration: 0.1,
      ease: "easeInOut",
    },
  },
};
```

### 4. 在组件中使用动画

在实际组件中使用这些动画效果：

```tsx
import { motion } from "framer-motion";
import { pageVariants, cardVariants, hoverVariants, tapVariants } from "@/lib/animations";

export function DashboardPage() {
  return (
    <motion.div
      initial="initial"
      animate="enter"
      exit="exit"
      variants={pageVariants}
    >
      <div className="space-y-6">
        <motion.div
          variants={cardVariants}
          initial="initial"
          animate="enter"
        >
          <h1 className="text-3xl font-bold">仪表板</h1>
        </motion.div>
        
        <motion.div
          whileHover="hover"
          whileTap="tap"
          variants={{ ...hoverVariants, ...tapVariants }}
        >
          <Button>交互按钮</Button>
        </motion.div>
      </div>
    </motion.div>
  );
}
```

通过这种方式，我们可以为应用添加流畅且有意义的动画效果，提升整体用户体验。
--------------------
STEP: 创建设计系统和组件库

FILE: src/components/ui/design-system.tsx
LANGUAGE: typescript
CODE:
```typescript
// Design System documentation component
export function DesignSystem() {
  return (
    <div className="space-y-8">
      <div>
        <h2 className="text-2xl font-bold mb-4">颜色系统</h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <ColorPalette name="Primary" colors={["bg-primary", "bg-primary/90", "bg-primary/80"]} />
          <ColorPalette name="Secondary" colors={["bg-secondary", "bg-secondary/90", "bg-secondary/80"]} />
          <ColorPalette name="Accent" colors={["bg-accent", "bg-accent/90", "bg-accent/80"]} />
          <ColorPalette name="Muted" colors={["bg-muted", "bg-muted/90", "bg-muted/80"]} />
        </div>
      </div>
      
      <div>
        <h2 className="text-2xl font-bold mb-4">排版系统</h2>
        <div className="space-y-2">
          <TypographyExample 
            label="H1 - Page Title" 
            className="text-4xl font-bold"
            text="The quick brown fox"
          />
          <TypographyExample 
            label="H2 - Section Heading" 
            className="text-3xl font-bold"
            text="The quick brown fox"
          />
          <TypographyExample 
            label="H3 - Subheading" 
            className="text-2xl font-semibold"
            text="The quick brown fox"
          />
          <TypographyExample 
            label="Body - Large" 
            className="text-lg"
            text="The quick brown fox jumps over the lazy dog"
          />
          <TypographyExample 
            label="Body - Regular" 
            className="text-base"
            text="The quick brown fox jumps over the lazy dog"
          />
          <TypographyExample 
            label="Body - Small" 
            className="text-sm"
            text="The quick brown fox jumps over the lazy dog"
          />
        </div>
      </div>
      
      <div>
        <h2 className="text-2xl font-bold mb-4">间距系统</h2>
        <div className="space-y-2">
          <SpacingExample label="Space 1" size="h-1" />
          <SpacingExample label="Space 2" size="h-2" />
          <SpacingExample label="Space 3" size="h-3" />
          <SpacingExample label="Space 4" size="h-4" />
          <SpacingExample label="Space 5" size="h-5" />
          <SpacingExample label="Space 6" size="h-6" />
          <SpacingExample label="Space 8" size="h-8" />
          <SpacingExample label="Space 10" size="h-10" />
        </div>
      </div>
    </div>
  );
}

function ColorPalette({ name, colors }: { name: string; colors: string[] }) {
  return (
    <div className="space-y-2">
      <h3 className="font-medium">{name}</h3>
      <div className="space-y-2">
        {colors.map((color, index) => (
          <div key={index} className="flex items-center gap-2">
            <div className={`w-10 h-10 rounded ${color}`} />
            <span className="text-sm">{color}</span>
          </div>
        ))}
      </div>
    </div>
  );
}

function TypographyExample({ label, className, text }: { label: string; className: string; text: string }) {
  return (
    <div className="flex items-center gap-4">
      <div className="w-40">
        <span className="text-sm text-muted-foreground">{label}</span>
      </div>
      <div className={className}>{text}</div>
    </div>
  );
}

function SpacingExample({ label, size }: { label: string; size: string }) {
  return (
    <div className="flex items-center gap-4">
      <div className="w-40">
        <span className="text-sm text-muted-foreground">{label}</span>
      </div>
      <div className="flex items-center gap-2">
        <div className={`w-4 bg-primary ${size}`} />
        <span className="text-sm">{size.replace('h-', '')} (rem)</span>
      </div>
    </div>
  );
}
```
HIGHLIGHTS: 1-100

CONTENT:
## 创建设计系统和组件库

设计系统是确保 UI 一致性和提高开发效率的关键。让我们看看如何创建一个完整的设计系统。

### 1. 设计系统的重要性

设计系统是一套统一的设计原则、组件和指南，可以帮助团队：

1. **保持一致性** - 确保整个产品线的视觉和交互一致性
2. **提高效率** - 复用组件和模式，减少重复设计和开发工作
3. **改善协作** - 为设计师和开发者提供共同语言
4. **保证质量** - 通过标准化组件确保用户体验质量

### 2. 设计系统的核心组成部分

#### 颜色系统
颜色系统定义了应用中使用的所有颜色，包括主色、辅助色、状态色等。

```tsx
<div className="grid grid-cols-2 md:grid-cols-4 gap-4">
  <ColorPalette name="Primary" colors={["bg-primary", "bg-primary/90", "bg-primary/80"]} />
  <ColorPalette name="Secondary" colors={["bg-secondary", "bg-secondary/90", "bg-secondary/80"]} />
  <ColorPalette name="Accent" colors={["bg-accent", "bg-accent/90", "bg-accent/80"]} />
  <ColorPalette name="Muted" colors={["bg-muted", "bg-muted/90", "bg-muted/80"]} />
</div>
```

#### 排版系统
排版系统定义了应用中的字体大小、字重、行高等文本样式。

```tsx
<TypographyExample 
  label="H1 - Page Title" 
  className="text-4xl font-bold"
  text="The quick brown fox"
/>
<TypographyExample 
  label="H2 - Section Heading" 
  className="text-3xl font-bold"
  text="The quick brown fox"
/>
```

#### 间距系统
间距系统定义了应用中使用的统一间距单位。

```tsx
<SpacingExample label="Space 4" size="h-4" />
<SpacingExample label="Space 6" size="h-6" />
<SpacingExample label="Space 8" size="h-8" />
```

### 3. 组件库开发

基于设计系统，我们可以开发一套可复用的组件库：

#### 基础组件
- Button（按钮）
- Input（输入框）
- Card（卡片）
- Typography（排版）

#### 布局组件
- Grid（网格）
- Container（容器）
- Flex（弹性布局）

#### 导航组件
- Navigation（导航）
- Breadcrumb（面包屑）
- Pagination（分页）

#### 反馈组件
- Alert（警告）
- Toast（提示）
- Modal（模态框）

### 4. 设计系统的维护和更新

设计系统不是一成不变的，需要根据项目发展和用户反馈进行持续维护：

1. **定期审查** - 定期检查组件的使用情况和效果
2. **收集反馈** - 从设计师和开发者那里收集使用反馈
3. **迭代更新** - 根据反馈和需求更新设计系统
4. **文档完善** - 保持文档与实际实现同步

通过建立和维护一个完善的设计系统，我们可以确保应用 UI 的一致性和高质量，同时提高团队的开发效率。