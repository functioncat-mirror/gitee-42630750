========================================
COURSE
========================================
TITLE: 搭建本地环境
DESCRIPTION: 学习如何在本地环境中设置和运行 React + TailwindCSS + ShadcnUI + Vite 项目
DIFFICULTY: beginner
ESTIMATED_TIME: 15
PREREQUISITES: node-js, npm
TAGS: react, tailwindcss, shadcnui, vite, setup

PROJECT_FILES:
package.json
src/
src/App.tsx
src/main.tsx
vite.config.ts
tsconfig.json

STEPS:
STEP: 检查 Node.js 和 npm 环境
FILE: package.json
LANGUAGE: json
CODE:
```
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
  },
  "devDependencies": {
  }
}
```
HIGHLIGHTS: 
/"dev": "vite"/
/"build": "tsc && vite build"/

CONTENT:
# 搭建本地环境

在开始开发之前，我们需要确保本地开发环境已经正确设置。本课程将指导您完成整个过程。

## 检查 Node.js 和 npm 环境

首先，确保您的系统中已安装 Node.js 和 npm。您可以通过以下命令检查：

```bash
node --version
npm --version
```

推荐使用 Node.js 16+ 版本以获得最佳性能和兼容性。

项目中的 [package.json](file:///Users/bondchen/abucode/templates/basic/react-template/package.json) 文件包含了项目的所有依赖和可用脚本。您可以看到定义了以下几个关键脚本：
- `dev`: 启动开发服务器
- `build`: 构建生产版本
- `preview`: 预览生产构建
- `lint`: 运行代码检查

这些脚本将用于项目的不同阶段。
--------------------
STEP: 安装项目依赖
FILE: package.json
LANGUAGE: shell
CODE:
```
npm install
```
HIGHLIGHTS: 
/npm install/

CONTENT:
# 安装项目依赖

在项目根目录中打开终端，运行以下命令安装所有必需的依赖项：

```bash
npm install
```

这将根据 [package.json](file:///Users/bondchen/abucode/templates/basic/react-template/package.json) 中定义的依赖项安装所有包。安装过程可能需要一些时间，具体取决于您的网络速度。

依赖项包括：
- React 和相关库
- TailwindCSS 和相关工具
- ShadcnUI 组件
- Vite 构建工具
- TypeScript 和相关类型定义
--------------------
STEP: 启动开发服务器
FILE: package.json
LANGUAGE: shell
CODE:
```
npm run dev
```
HIGHLIGHTS: 
/npm run dev/

CONTENT:
# 启动开发服务器

依赖安装完成后，您可以启动开发服务器：

```bash
npm run dev
```

此命令将启动 Vite 开发服务器，默认情况下在 [http://localhost:5173](http://localhost:5173) 上运行。

Vite 提供了许多现代开发功能：
- 快速的冷启动
- 即时的模块热更新（HMR）
- 按需编译，只编译当前页面使用的代码
- 丰富的错误提示

您应该能在浏览器中看到项目的欢迎页面，这意味着您的本地环境已经成功搭建。
----------------------------------------
TITLE: 部署到函数猫
DESCRIPTION: 学习如何将 React + TailwindCSS + ShadcnUI + Vite 项目部署到 FunctionCat 平台
DIFFICULTY: beginner
ESTIMATED_TIME: 10
PREREQUISITES: 搭建本地环境
TAGS: deployment, functioncat, hosting

PROJECT_FILES:
functioncat.yaml
package.json
src/
dist/

STEPS:
STEP: 了解 FunctionCat 部署配置
FILE: functioncat.yaml
LANGUAGE: yaml
CODE:
```
system: 1.0.0
info:
  name: React + TailwindCSS + ShadcnUI + Vite Template
  vars: {}

envs:
  dev:
    branch: main
  prod:
    branch: main

routes:
  main_env: prod
  main_app: frontend

apps:
  frontend:
    type: web_frontend
    envs:
      dev:
        build:
          script: npm install; npm run build
        provision:
          root_path: dist
          type: nodejs18x
      prod:
        build:
          script: npm install; npm run build
        provision:
          root_path: dist
          type: nodejs18x
```
HIGHLIGHTS: 
/system: 1\.0\.0/
/type: web_frontend/
/(?s)dev:.*? npm run build/


CONTENT:
# 部署到函数猫

FunctionCat 是一个现代化的应用托管平台，支持一键部署您的前端应用。本模板已经预配置了部署设置，使您能够轻松地将应用部署到 FunctionCat。

## 了解 FunctionCat 部署配置

部署配置在 [functioncat.yaml](file:///Users/bondchen/abucode/templates/basic/react-template/functioncat.yaml) 文件中定义。这个文件告诉 FunctionCat 如何构建和部署您的应用：

- `system`: FunctionCat 配置版本
- `apps.frontend.type`: 应用类型（web_frontend 表示这是一个前端 Web 应用）
- `apps.frontend.envs.dev.build.script`: 开发环境构建脚本
- `apps.frontend.envs.prod.build.script`: 生产环境构建脚本
- `provision.root_path`: 构建产物目录（dist）

您可以看到构建脚本包括两个步骤：
1. `npm install` - 安装依赖
2. `npm run build` - 构建生产版本

构建产物将放在 [dist](file:///Users/bondchen/abucode/templates/basic/react-template/dist) 目录中，这是 FunctionCat 将提供服务的目录。
--------------------
STEP: 在 FunctionCat 上部署应用
FILE: README.md
LANGUAGE: markdown
CODE:
```
## 部署

此模板已准备好在 FunctionCat 上部署。只需按照 FunctionCat 平台中的标准部署流程操作即可。
```
HIGHLIGHTS: 
/## 部署/
/此模板已准备好在 FunctionCat 上部署。只需按照 FunctionCat 平台中的标准部署流程操作即可。/

CONTENT:
# 在 FunctionCat 上部署应用

要在 FunctionCat 上部署您的应用，请按照以下步骤操作：

1. 将您的代码推送到 Git 仓库（GitHub、GitLab 或 Gitee）
2. 登录 FunctionCat 控制台
3. 创建新应用或选择现有应用
4. 连接您的 Git 仓库
5. 配置部署设置（如果需要）
6. 触发部署

FunctionCat 将自动：
- 克隆您的代码
- 运行构建脚本（`npm install; npm run build`）
- 将 [dist](file:///Users/bondchen/abucode/templates/basic/react-template/dist) 目录部署为静态网站

部署完成后，您将获得一个 FunctionCat 提供的 URL，您的应用就可以通过这个 URL 访问了。

由于模板已经配置了 [functioncat.yaml](file:///Users/bondchen/abucode/templates/basic/react-template/functioncat.yaml) 文件，因此大部分配置已经自动完成，您只需关注代码本身。
--------------------
STEP: 构建和预览生产版本
FILE: package.json
LANGUAGE: shell
CODE:
```
npm run build
npm run preview
```
HIGHLIGHTS: 
/npm run build/
/npm run preview/

CONTENT:
# 构建和预览生产版本

在部署之前，您可以本地构建和预览生产版本以确保一切正常：

1. 构建生产版本：
   ```bash
   npm run build
   ```

2. 预览生产版本：
   ```bash
   npm run preview
   ```

`npm run build` 命令将执行 TypeScript 编译和 Vite 构建过程，生成优化的生产代码并放置在 [dist](file:///Users/bondchen/abucode/templates/basic/react-template/dist) 目录中。

`npm run preview` 命令将在本地启动一个服务器来预览构建后的应用，让您在部署前确认一切正常。

这些命令与 FunctionCat 上的部署过程使用相同的脚本，确保本地和线上环境的一致性。
----------------------------------------
TITLE: 项目结构介绍
DESCRIPTION: 深入了解 React + TailwindCSS + ShadcnUI + Vite 模板的项目结构和各个文件的作用
DIFFICULTY: beginner
ESTIMATED_TIME: 15
PREREQUISITES: 搭建本地环境
TAGS: project-structure, file-organization, architecture

PROJECT_FILES:
src/
src/assets/
src/components/
src/components/ui/
src/lib/
src/App.tsx
src/main.tsx
src/index.css
components.json
tailwind.config.js
postcss.config.js
vite.config.ts
tsconfig.json
package.json

STEPS:
STEP: 主要目录和文件概览
FILE: README.md
LANGUAGE: markdown
CODE:
```
## 项目结构


.
├── src/
│   ├── assets/           # 静态资源
│   ├── components/       # React 组件
│   │   └── ui/           # ShadcnUI 组件
│   ├── lib/              # 工具函数
│   ├── App.tsx           # 主应用组件
│   ├── main.tsx          # 入口文件
│   └── index.css         # 全局样式
├── components.json       # ShadcnUI 配置
├── tailwind.config.js    # TailwindCSS 配置
├── postcss.config.js     # PostCSS 配置
├── vite.config.ts        # Vite 配置
├── tsconfig.json         # TypeScript 配置
└── package.json          # 依赖和脚本

```
HIGHLIGHTS: 
/components.json/

CONTENT:
# 主要目录和文件概览

项目的结构遵循现代前端应用的最佳实践，使得代码组织清晰、易于维护。

## 核心目录

- [src/](file:///Users/bondchen/abucode/templates/basic/react-template/src): 包含所有源代码
  - [assets/](file:///Users/bondchen/abucode/templates/basic/react-template/src/assets): 静态资源文件，如图片、字体等
  - [components/](file:///Users/bondchen/abucode/templates/basic/react-template/src/components): React 组件
    - [ui/](file:///Users/bondchen/abucode/templates/basic/react-template/src/components/ui): ShadcnUI 预构建组件
  - [lib/](file:///Users/bondchen/abucode/templates/basic/react-template/src/lib): 工具函数和辅助代码
- [src/App.tsx](file:///Users/bondchen/abucode/templates/basic/react-template/src/App.tsx): 主应用组件
- [src/main.tsx](file:///Users/bondchen/abucode/templates/basic/react-template/src/main.tsx): 应用入口文件
- [src/index.css](file:///Users/bondchen/abucode/templates/basic/react-template/src/index.css): 全局样式文件

## 配置文件

- [components.json](file:///Users/bondchen/abucode/templates/basic/react-template/components.json): ShadcnUI 组件配置
- [tailwind.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/tailwind.config.js): TailwindCSS 配置文件
- [postcss.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/postcss.config.js): PostCSS 配置文件
- [vite.config.ts](file:///Users/bondchen/abucode/templates/basic/react-template/vite.config.ts): Vite 构建工具配置
- [tsconfig.json](file:///Users/bondchen/abucode/templates/basic/react-template/tsconfig.json): TypeScript 配置文件
- [package.json](file:///Users/bondchen/abucode/templates/basic/react-template/package.json): 项目依赖和脚本配置
--------------------
STEP: 源代码目录详解
FILE: src/App.tsx
LANGUAGE: typescript
CODE:
```
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  HomeIcon, 
  SettingsIcon, 
  BarChartIcon, 
  UsersIcon,
  SunIcon,
  MoonIcon
} from "lucide-react";
import { useState, useEffect } from "react";

function App() {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  
  // 检查系统主题偏好
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (systemPrefersDark) {
      setTheme('dark');
    }
  }, []);
  
  // 应用主题到DOM
  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  }, [theme]);
  
  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

}
```
HIGHLIGHTS: 
/import { Button } from "@\/components\/ui\/button";/
/import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@\/components\/ui\/card";/
/const \[theme, setTheme\] = useState<'light' \| 'dark'>\('light'\);/

CONTENT:
# 源代码目录详解

[src/](file:///Users/bondchen/abucode/templates/basic/react-template/src) 目录包含了项目的所有源代码。

## 核心文件

[src/App.tsx](file:///Users/bondchen/abucode/templates/basic/react-template/src/App.tsx) 是主应用组件，它展示了应用的主要界面。从代码中可以看到：

1. 导入了多个 ShadcnUI 组件，如 Button、Card、Input、Tabs 等
2. 使用 lucide-react 图标库提供的图标组件
3. 实现了主题切换功能（light/dark 模式）
4. 使用 React Hooks 管理状态和副作用

[src/main.tsx](file:///Users/bondchen/abucode/templates/basic/react-template/src/main.tsx) 是应用入口文件，负责渲染根组件到 DOM。

[src/index.css](file:///Users/bondchen/abucode/templates/basic/react-template/src/index.css) 包含全局样式和主题变量定义。

## 组件目录

[components/](file:///Users/bondchen/abucode/templates/basic/react-template/src/components) 目录用于存放项目自定义组件。

[components/ui/](file:///Users/bondchen/abucode/templates/basic/react-template/src/components/ui) 目录包含所有 ShadcnUI 预构建组件，这些组件可以按需添加和使用。

## 工具函数

[lib/](file:///Users/bondchen/abucode/templates/basic/react-template/src/lib) 目录用于存放工具函数和辅助代码，例如格式化函数、API 调用封装等。
--------------------
STEP: 配置文件详解
FILE: tailwind.config.js
LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```
HIGHLIGHTS: 
/darkMode: \["class"\],/

CONTENT:
# 配置文件详解

项目的配置文件决定了构建工具、样式系统和开发环境的行为。

## 样式配置

[tailwind.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/tailwind.config.js) 是 TailwindCSS 的配置文件：

1. `darkMode: ["class"]` 启用基于 CSS 类的暗色主题支持
2. `content` 数组指定了需要扫描的文件，Tailwind 将从这些文件中提取使用的类名
3. `theme` 对象扩展了默认主题，定义了颜色、间距、动画等
4. `plugins` 数组包含了使用的插件，如 tailwindcss-animate

[postcss.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/postcss.config.js) 配置了 PostCSS 插件，主要用于处理 TailwindCSS。

## 构建配置

[vite.config.ts](file:///Users/bondchen/abucode/templates/basic/react-template/vite.config.ts) 配置了 Vite 构建工具，包括路径别名、插件等。

[tsconfig.json](file:///Users/bondchen/abucode/templates/basic/react-template/tsconfig.json) 配置了 TypeScript 编译选项。

## 组件配置

[components.json](file:///Users/bondchen/abucode/templates/basic/react-template/components.json) 是 ShadcnUI 的配置文件，定义了组件的安装路径和样式配置。
----------------------------------------
TITLE: 目标用户和功能范围
DESCRIPTION: 基于用户中心设计模型，学习如何定义新应用的目标用户和功能范围
DIFFICULTY: intermediate
ESTIMATED_TIME: 20
PREREQUISITES: 项目结构介绍
TAGS: user-centered-design, scope, requirements, planning

PROJECT_FILES:
src/
src/components/
src/components/ui/
src/lib/utils.ts
package.json
README.md

STEPS:
STEP: 确定目标用户群体
FILE: README.md
LANGUAGE: markdown
CODE:
```
# React + TailwindCSS + ShadcnUI + Vite 模板

这是一个基础模板，可以在FunctionCat中进行设置、配置、扩展和部署。它包括：

- React 18
- TypeScript
- TailwindCSS
- ShadcnUI 组件
- Vite 构建工具
```
HIGHLIGHTS: 
/这是一个基础模板，可以在FunctionCat中进行设置、配置、扩展和部署。/

CONTENT:
# 确定目标用户群体

在开始构建新应用之前，首先要明确目标用户群体。这将直接影响后续的功能设计和用户体验决策。

## 用户画像分析

基于模板的技术栈特点（React、TypeScript、TailwindCSS、ShadcnUI），我们可以推测目标用户可能包括：

1. **前端开发人员**：熟悉现代前端技术栈，希望快速构建原型或完整应用
2. **UI/UX 设计师**：需要与开发团队协作，关注界面美观和用户体验
3. **初创团队**：资源有限但需要快速推出产品
4. **个人开发者**：希望构建个人项目或作品集

## 用户需求分析

不同用户群体有不同的需求：

- **开发人员**需要：高效的开发工具、清晰的代码结构、易于扩展的架构
- **设计师**需要：灵活的样式系统、丰富的UI组件、一致的设计语言
- **团队**需要：标准化的开发流程、良好的文档、易于协作的代码结构
- **个人开发者**需要：低门槛入门、完整的功能示例、清晰的学习路径

了解这些用户需求有助于我们确定应用的功能范围和优先级。
--------------------
STEP: 定义功能需求
FILE: package.json
LANGUAGE: json
CODE:
```
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
  },
  "devDependencies": {
  }
}
```
HIGHLIGHTS: 
/"dev": "vite"/
/"build": "tsc && vite build"/

CONTENT:
# 定义功能需求

功能需求描述了应用应该具备的具体功能和特性。基于用户需求分析，我们可以定义以下功能需求：

## 核心功能需求

1. **响应式设计**：应用在各种设备上都能良好显示
   - 移动端适配
   - 平板适配
   - 桌面端优化

2. **主题支持**：支持 Light 和 Dark 模式
   - 系统主题自动检测
   - 用户主题偏好保存
   - 平滑的主题切换动画

3. **组件系统**：丰富的 UI 组件库
   - 按需加载组件
   - 一致的设计语言
   - 易于定制的样式

4. **开发体验**：高效的开发工具链
   - 快速热重载
   - TypeScript 类型检查
   - 代码规范检查

## 扩展功能需求

1. **路由管理**：支持多页面应用
2. **状态管理**：复杂应用的状态管理方案
3. **国际化**：多语言支持
4. **性能优化**：代码分割、懒加载等
5. **可访问性**：符合 WCAG 标准的无障碍设计

这些功能需求将指导我们后续的开发工作，确保应用满足用户期望。
--------------------
STEP: 定义内容需求
FILE: src/components/ui/button.tsx
LANGUAGE: typescript
CODE:
```
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```
HIGHLIGHTS: 
/const buttonVariants = cva\(/
/export { Button, buttonVariants }/

CONTENT:
# 定义内容需求

内容需求关注应用中需要展示的信息类型和质量标准。对于基于此模板的新应用，我们需要考虑以下内容需求：

## 内容类型

1. **文本内容**：
   - 清晰的界面说明文字
   - 错误提示和帮助信息
   - 用户引导内容

2. **视觉元素**：
   - 图标和插图
   - 照片和插图
   - 数据可视化图表

3. **交互元素**：
   - 表单和输入控件
   - 按钮和操作项
   - 导航和菜单

## 内容质量要求

1. **一致性**：所有内容遵循统一的风格指南
2. **可访问性**：内容对所有用户都可访问，包括残障人士
3. **响应式**：内容在不同设备上都能良好展示
4. **本地化**：支持多语言内容显示
5. **时效性**：内容保持更新，特别是动态数据

## 内容管理策略

1. **静态内容**：直接写入代码或配置文件
2. **动态内容**：通过API获取或用户生成
3. **缓存策略**：优化内容加载性能
4. **版本控制**：跟踪内容变更历史

通过明确定义内容需求，我们可以确保应用不仅功能完善，而且内容丰富、质量高，能够为用户提供有价值的信息。
----------------------------------------
TITLE: 导航和功能结构
DESCRIPTION: 基于用户中心设计模型，学习如何设计应用的导航结构和功能组织
DIFFICULTY: intermediate
ESTIMATED_TIME: 25
PREREQUISITES: 目标用户和功能范围
TAGS: navigation, structure, user-flow, information-architecture

PROJECT_FILES:
src/
src/App.tsx
src/components/
src/components/ui/
src/lib/utils.ts
package.json

STEPS:
STEP: 设计信息架构
FILE: src/App.tsx
LANGUAGE: typescript
CODE:
```
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  HomeIcon, 
  SettingsIcon, 
  BarChartIcon, 
  UsersIcon,
  SunIcon,
  MoonIcon
} from "lucide-react";
import { useState, useEffect } from "react";

function App() {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  
  // 检查系统主题偏好
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (systemPrefersDark) {
      setTheme('dark');
    }
  }, []);
  
  // 应用主题到DOM
  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  }, [theme]);
  
  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

}
```
HIGHLIGHTS: 
/import { Button } from "@\/components\/ui\/button";/
/const \[theme, setTheme\] = useState<'light' \| 'dark'>\('light'\);/

CONTENT:
# 设计信息架构

信息架构（Information Architecture）是结构层的核心部分，它决定了内容如何组织和用户如何找到所需信息。

## 分析现有结构

在 [src/App.tsx](file:///Users/bondchen/abucode/templates/basic/react-template/src/App.tsx) 中，我们可以看到当前的信息架构包括：

1. **主导航**：
   - 首页
   - 文档
   - 组件
   - 关于

2. **用户操作**：
   - 主题切换
   - 登录/注册

3. **功能区域**：
   - 特性展示区
   - 入门指南（使用 Tabs 组件）

## 设计原则

设计信息架构时应遵循以下原则：

1. **用户中心**：以用户需求和行为模式为基础组织信息
2. **一致性**：在整个应用中保持导航模式的一致
3. **可扩展性**：为未来功能预留空间
4. **简洁性**：避免过多层级和复杂结构

## 信息组织方法

1. **层级结构**：通过父子关系组织内容
2. **分组分类**：将相关功能分组
3. **标签系统**：使用标签对内容进行多维度分类
4. **搜索功能**：提供搜索入口帮助用户快速找到内容

对于新应用，建议根据功能相关性组织导航项，确保用户能直观地找到所需功能。
--------------------
STEP: 设计交互流程
FILE: src/components/ui/tabs.tsx
LANGUAGE: typescript
CODE:
```
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
```
HIGHLIGHTS: 
/const Tabs = TabsPrimitive\.Root/

CONTENT:
# 设计交互流程

交互设计关注用户如何与应用进行交互，以及应用如何响应用户的操作。

## 分析现有交互

模板中使用了多种交互模式：

1. **Tab 导航**：在入门指南部分使用 Tabs 组件，用户可以在不同内容间切换
2. **主题切换**：通过按钮切换 Light/Dark 模式
3. **表单交互**：输入框和按钮的组合

## 交互设计原则

1. **可见性**：确保用户能清楚地看到可交互的元素
2. **反馈**：为用户操作提供即时反馈
3. **一致性**：保持交互模式在整个应用中的一致性
4. **简洁性**：避免不必要的复杂交互

## 常见交互模式

1. **导航交互**：
   - 主导航菜单
   - 面包屑导航
   - 分页导航

2. **表单交互**：
   - 输入验证
   - 实时反馈
   - 提交处理

3. **内容交互**：
   - 展开/收起
   - 模态框
   - 下拉菜单

在设计新应用时，应根据功能需求选择合适的交互模式，并确保它们符合用户预期。
--------------------
STEP: 规划功能结构
FILE: package.json
LANGUAGE: json
CODE:
```
{
  "name": "react-tailwind-shadcn-template",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.2",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-context-menu": "^2.2.16",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-hover-card": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-navigation-menu": "^1.2.14",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-toggle-group": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.8",
    "class-variance-authority": "^0.7.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.544.0",
    "next-themes": "^0.4.6",
    "react": "^18.2.0",
    "react-day-picker": "^9.9.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.62.0",
    "react-resizable-panels": "^3.0.6",
    "recharts": "^2.15.4",
    "sonner": "^2.0.7",
    "vaul": "^1.1.2",
    "zod": "^4.1.8"
  },
  "devDependencies": {
  }
}
```
HIGHLIGHTS: 
/"@radix-ui\/react-navigation-menu": "\^1\.2\.14"/
/"@radix-ui\/react-tabs": "\^1\.1\.13"/

CONTENT:
# 规划功能结构

功能结构定义了应用中各个功能模块的组织方式和相互关系。

## 利用现有组件

模板提供了丰富的 UI 组件，可以用于构建功能结构：

1. **导航菜单**：使用 `@radix-ui/react-navigation-menu` 构建主导航
2. **选项卡**：使用 `@radix-ui/react-tabs` 组织相关内容
3. **对话框**：使用 `@radix-ui/react-dialog` 展示详细信息或表单
4. **下拉菜单**：使用 `@radix-ui/react-dropdown-menu` 提供额外选项

## 功能模块规划

根据前一课确定的功能需求，可以规划以下功能模块：

1. **核心功能模块**：
   - 用户认证（登录/注册）
   - 主界面/仪表板
   - 核心业务功能

2. **辅助功能模块**：
   - 设置/配置
   - 帮助/文档
   - 用户反馈

3. **管理功能模块**（如适用）：
   - 内容管理
   - 用户管理
   - 系统监控

## 路由结构设计

对于多页面应用，需要设计合理的路由结构：

```
/              # 首页/仪表板
/login         # 登录页
/register      # 注册页
/settings      # 设置页
/help          # 帮助文档
/profile       # 用户资料
/features      # 功能展示
```

每个路由应对应一个清晰的功能，避免功能重叠或混淆。路由设计应与导航结构保持一致，确保用户能轻松在不同功能间切换。
----------------------------------------
TITLE: UI效果设计
DESCRIPTION: 基于用户中心设计模型，学习如何创建吸引人的用户界面效果
DIFFICULTY: intermediate
ESTIMATED_TIME: 25
PREREQUISITES: 导航和功能结构
TAGS: ui-design, visual-design, tailwindcss, shadcnui, aesthetics

PROJECT_FILES:
src/
src/App.tsx
src/index.css
src/components/
src/components/ui/
src/lib/utils.ts
tailwind.config.js
components.json

STEPS:
STEP: 设计视觉层次
FILE: src/index.css
LANGUAGE: css
CODE:
```
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}
```
HIGHLIGHTS: 

/--primary: 222\.2 47\.4% 11\.2%;/

CONTENT:
# 设计视觉层次

视觉层次是表现层的核心，它决定了用户界面的外观和感觉。通过合理运用颜色、字体、间距等元素，可以引导用户的注意力并提升用户体验。

## 颜色系统

模板提供了完整的颜色系统，包括：

1. **基础颜色**：
   - `--background` 和 `--foreground`：页面背景和前景色
   - `--primary` 和 `--primary-foreground`：主要操作颜色
   - `--secondary` 和 `--secondary-foreground`：次要操作颜色
   - `--muted` 和 `--muted-foreground`：弱化内容颜色

2. **功能颜色**：
   - `--destructive`：危险操作颜色（如删除）
   - `--success`：成功状态颜色
   - `--warning`：警告状态颜色

3. **组件颜色**：
   - `--card`：卡片组件背景色
   - `--popover`：弹出框背景色
   - `--border`：边框颜色
   - `--input`：输入框颜色

## 字体和排版

良好的排版能显著提升界面的可读性和美观度：

1. **字体选择**：选择易读且符合品牌调性的字体
2. **字号层次**：建立清晰的标题、副标题、正文层次
3. **行高和间距**：确保文字有足够的呼吸空间
4. **字重对比**：通过字重区分内容重要性

## 视觉层次原则

1. **对比原则**：通过颜色、大小、形状等创造对比
2. **重复原则**：重复使用相同的设计元素建立一致性
3. **对齐原则**：保持元素的对齐以创造秩序感
4. **亲密性原则**：相关元素靠近，无关元素分离

合理运用这些原则可以创建出既美观又易用的用户界面。
--------------------
STEP: 创建交互反馈效果
FILE: src/components/ui/button.tsx
LANGUAGE: typescript
CODE:
```
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
```
HIGHLIGHTS: 
/"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors/
/hover:bg-primary\/90/
/disabled:pointer-events-none disabled:opacity-50/

CONTENT:
# 创建交互反馈效果

交互反馈是提升用户体验的重要手段，它让用户知道他们的操作已被系统接收并正在处理。

## 按钮状态反馈

在 [Button](file:///Users/bondchen/abucode/templates/basic/react-template/src/components/ui/button.tsx#L57-L67) 组件中，我们可以看到多种状态反馈：

1. **默认状态**：按钮的正常显示状态
2. **悬停状态**：`hover:` 前缀定义了鼠标悬停时的样式变化
3. **焦点状态**：`focus-visible:` 前缀定义了获得焦点时的样式
4. **禁用状态**：`disabled:` 前缀定义了禁用时的样式

这些状态反馈让用户清楚地知道按钮的当前状态和可进行的操作。

## 动画和过渡

模板使用了多种动画和过渡效果：

1. **颜色过渡**：`transition-colors` 实现颜色变化的平滑过渡
2. **关键帧动画**：在 [tailwind.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/tailwind.config.js) 中定义的自定义动画
3. **组件动画**：如手风琴、模态框等组件的展开收起动画

## 视觉反馈类型

1. **即时反馈**：按钮点击、表单验证等立即响应
2. **状态反馈**：加载状态、成功/失败状态等
3. **进度反馈**：进度条、加载指示器等
4. **引导反馈**：工具提示、引导步骤等

良好的视觉反馈应该：
- 及时且准确
- 与用户操作相关
- 不干扰主要任务
- 符合用户预期
--------------------
STEP: 实现响应式设计
FILE: tailwind.config.js
LANGUAGE: javascript
CODE:
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```
HIGHLIGHTS: 
/"1400px"/

CONTENT:
# 实现响应式设计

响应式设计确保应用在各种设备和屏幕尺寸上都能提供良好的用户体验。

## 断点系统

TailwindCSS 提供了默认的断点系统：

- `sm`: 640px
- `md`: 768px
- `lg`: 1024px
- `xl`: 1280px
- `2xl`: 1536px

模板在 [tailwind.config.js](file:///Users/bondchen/abucode/templates/basic/react-template/tailwind.config.js) 中自定义了容器设置，最大宽度为 1400px。

## 响应式设计策略

1. **移动优先**：从最小屏幕开始设计，逐步增强到大屏幕
2. **弹性布局**：使用 Flexbox 和 Grid 创建弹性布局
3. **相对单位**：使用 rem、em、% 等相对单位而非固定像素
4. **媒体查询**：通过 Tailwind 的断点前缀应用不同样式

## 响应式组件设计

1. **自适应网格**：
   ```tsx
   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
     {/* 内容项 */}
   </div>
   ```

2. **隐藏/显示元素**：
   ```tsx
   <div className="hidden md:block">
     {/* 仅在中等及以上屏幕显示 */}
   </div>
   ```

3. **调整字体大小**：
   ```tsx
   <h1 className="text-lg sm:text-xl md:text-2xl">
     响应式标题
   </h1>
   ```

## 响应式设计原则

1. **内容优先**：确保核心内容在所有设备上都可访问
2. **触摸友好**：在移动设备上提供足够大的触摸目标
3. **性能优化**：在移动设备上优化图片和资源加载
4. **一致体验**：在不同设备上保持一致的用户体验

通过合理运用响应式设计，可以确保应用在桌面、平板和手机等各种设备上都能提供优秀的用户体验。